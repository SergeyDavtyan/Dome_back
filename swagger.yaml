openapi: 3.0.1
info:
  title: User Service
  version: 1.0.0
servers:
  - url: http://localhost:5004/user-service
  - url: http://api.testchess.ru/user-service
paths:
  /user:
    put:
      tags:
        - user
      summary: editUser
      operationId: editUser
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: OK
          content: {}
      x-codegen-request-body-name: Login form
  /level:
    put:
      tags:
        - user
      summary: editlevel
      operationId: editlevel
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
        required: true
      responses:
        '200':
          description: OK
          content: {}
      x-codegen-request-body-name: Login form
  /user/accept/{userId}:
    put:
      tags:
        - user
      summary: deleteAcceptedRequests
      operationId: deleteAcceptedRequests
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
        required: true
      responses:
        '200':
          description: OK
          content: {}
      x-codegen-request-body-name: Login form
  /user/timeZone:
    patch:
      tags:
        - user
      summary: get user timeZone
      operationId: usertimeZone
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                timeZone:
                  type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/browserTimeZone:
    get:
      tags:
        - user
      summary: get browser TimeZone
      operationId: browserTimeZone
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                timeZone:
                  type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/:id/getTrustLessonDates:
    get:
      tags:
        - user
      summary: get Trust Lesson Dates
      operationId: getTrustLessonDates
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
        required: true
      responses:
        '200':
          description: OK
          content: {}
  /setrequizits:
    post:
      tags:
        - requizits
      summary: setRequizits
      operationId: setRequizits
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
        required: true
      responses:
        '200':
          description: OK
          content: {}
      x-codegen-request-body-name: Login form
  /chatCategory:
    post:
      tags:
        - chat
      summary: editChatTag
      operationId: editChatTag
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                dialog_id:
                  type: string
                name:
                  type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  dialog_types:
                    $ref: '#/components/schemas/DialogTypesDto'
      x-codegen-request-body-name: Edit chat tag form
  /comments:
    get:
      tags:
        - comments
      summary: getAllComments
      operationId: getAllComments
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comments'
        '500':
          description: server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    post:
      tags:
        - comments
      summary: createComment
      operationId: createComment
      security:
        - bearerAuth: []
      responses:
        '201':
          description: comment successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  comment:
                    $ref: '#/components/schemas/Comments'
        '500':
          description: Comment validation failed or some server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /comments/add-bonus:
    get:
      tags:
        - comments
      summary: addBonus
      operationId: addBonus
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content: {}
  /comments/by-sender/{userId}:
    get:
      tags:
        - comments
      summary: getCommentsByUser
      operationId: getCommentsByUser
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comments'
        '500':
          description: server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /comments/by-group/{groupId}:
    get:
      tags:
        - comments
      summary: getCommentsByGroup
      operationId: getCommentsByGroup
      security:
        - bearerAuth: []
      parameters:
        - name: groupId
          in: path
          description: Group ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content: {}
  /comments/{commentId}/change-status:
    put:
      tags:
        - comments
      summary: changeCommentStatus
      operationId: changeCommentStatus
      security:
        - bearerAuth: []
      parameters:
        - name: commentId
          in: path
          description: Comment ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Comment status updated successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  comment:
                    $ref: '#/components/schemas/Comments'
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Comment not found'
        '500':
          description: server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /comments/{commentId}:
    get:
      tags:
        - comments
      summary: getCommentById
      operationId: getCommentById
      security:
        - bearerAuth: []
      parameters:
        - name: commentId
          in: path
          description: Comment ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comments'
    put:
      tags:
        - comments
      summary: editComment
      operationId: editComment
      security:
        - bearerAuth: []
      parameters:
        - name: commentId
          in: path
          description: Comment ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comments'
    delete:
      tags:
        - comments
      summary: deleteComment
      operationId: deleteComment
      security:
        - bearerAuth: []
      parameters:
        - name: commentId
          in: path
          description: Comment ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: Комментарий успешно удален
        '404':
          description: Комментарий не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: Комментарий не найден
        '5XX':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: Unexpected error.
  /fcm:
    get:
      tags:
        - fcm
      summary: getAllTokensFCM
      operationId: getAllTokensFCM
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content: {}
    put:
      tags:
        - fcm
      summary: updateUserFCM
      operationId: updateUserFCM
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content: {}
    post:
      tags:
        - fcm
      summary: saveTokenFCM
      operationId: saveTokenFCM
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content: {}
  /fcm/push:
    post:
      tags:
        - fcm
      summary: Новое медиасообщение
      operationId: new fcm
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                msg:
                  type: string
                to:
                  type: number
                  description: dialog Id
                  example: 1
                userId:
                  type: number
                  description: user id
                  example: 2
        required: true
      responses:
        '200':
          description: OK
          content: {}
  /fcm/{userId}:
    get:
      tags:
        - fcm
      summary: getTokenFCMById
      operationId: getTokenFCMById
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content: {}
  /permissions/users:
    get:
      tags:
        - permissions
      summary: getUsers
      operationId: getUsers
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: role
          schema:
            type: string
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: archive
          schema:
            type: boolean
        - in: query
          name: sort
          schema:
            type: boolean
        - in: query
          name: withoutgroups
          schema:
            type: boolean
        - in: query
          name: all
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /permissions/users/{userId}:
    get:
      tags:
        - permissions
      summary: getUser
      operationId: getUser
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /permissions/role:
    post:
      tags:
        - permissions
      summary: setRole
      operationId: setRole
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /permissions/accept/{userId}:
    put:
      tags:
        - permissions
      summary: acceptEditRequest
      operationId: acceptEditRequest
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      field:
                        type: string
                      acceptedAt:
                        type: string
                      rejectedAt:
                        type: string

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /permissions/userscounter:
    get:
      tags:
        - permissions
      summary: counter
      operationId: counter
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user-service/session:
    get:
      tags:
        - session
      summary: получитъ сессию пользователья
      operationId: getUserSession
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  example: 678bf43f73e4f2e19e1fc756
                  description: user ID (mongoDB)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSession'
    post:
      tags:
        - session
      summary: создать новую сессию
      operationId: createUserSession
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSession'
    put:
      tags:
        - session
      summary: обновитъ сессию пользователья
      operationId: updateUserSession
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sessionId:
                  type: integer
                  example: 678bf43f73e4f2e19e1fc756
                userId:
                  type: integer
                  example: 678bf4ce3b6362af720cfa2c
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSession'
        '400':
          description: Invalid session or user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandartApiError'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandartApiError'
  /user-service/session/{userId}:
    delete:
      tags:
        - session
      summary: удалитъ пользователья по id
      operationId: deleteUserById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: id пользователья которого надо удалитъ
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSession'
        '400':
          description: Invalid user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandartApiError'
  /user-service/session/switch:
    post:
      tags:
        - session
      summary: сменить пользователья
      operationId: switchUser
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Пользователя с введенным ID не существует
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandartApiError'

components:
  schemas:
    DialogTypesDto:
      type: array
      items:
        type: object
        properties:
          dialog:
            type: string
            description: Dialog ObjectId
          name:
            type: string
    User:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        sname:
          type: string
        tname:
          type: string
        verify:
          type: boolean
        password:
          type: string
        avatar:
          type: string
        role:
          type: string
        lichess:
          type: string
        dialog_types:
          $ref: '#/components/schemas/DialogTypesDto'
        open_level:
          type: array
          items:
            type: string
        requizits:
          type: number
        born:
          type: string
        country:
          type: string
        sex:
          type: string
        archive:
          type: boolean
        hex:
          type: string
        shedule:
          type: array
          items:
            type: object
            properties:
              time:
                type: string
              days:
                type: array
                items:
                  type: string
        countOfBonus:
          type: number
        format:
          type: string
        durency:
          type: string
        comment:
          type: string
        fcm:
          type: string
        parentName:
          type: string
        actualMail:
          type: string
        nationality:
          type: string
        languages:
          type: array
          items:
            type: string
        city:
          type: string
        whatsappNumber:
          type: string
        editRequest:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              value:
                type: string
              acceptedAt:
                type: string
                description: Date
              rejectedAt:
                type: string
                description: Date
        seance:
          type: boolean
        online:
          type: boolean
        offline:
          type: boolean
        techTrainer:
          type: boolean
        techStudents:
          type: boolean
        programmers:
          type: boolean
        adminProblems:
          type: boolean
        admins:
          type: boolean
        trainerProblems:
          type: boolean
        trainingProgram:
          type: boolean
        araratInt:
          type: boolean
        testForNewTrainers:
          type: boolean
        testLessonQuestions:
          type: boolean
        importantNews:
          type: boolean
        chatForChecks:
          type: boolean
        armTrainers:
          type: boolean
        rusTrainers:
          type: boolean
        engTrainers:
          type: boolean
        fraTrainers:
          type: boolean
        gerTrainers:
          type: boolean
        allgroups:
          type: boolean
        notifications:
          type: boolean
        groupForNewTrainers:
          type: boolean
        psycho:
          type: boolean
        removedFromGroupBy:
          type: string
          description: User ObjectId
          default: 'null'
        trustLessonForbidden:
          type: boolean
          default: 'false'
        trustLessonDates:
          type: array
          format: Date
        blockHistory:
          type: array
          items:
            type: object
            properties:
              blockedBy:
                type: number
                format: id
                description: MongoDB id
              blockedAt:
                type: string
                format: date
                description: Date
              type:
                type: string
        commentToDebtor:
          type: string
        scheduleEditHistory:
          type: array
          items:
            type: object
            properties:
              acceptedAt:
                type: string
                format: date
                description: Date
              schedule:
                type: array
                items:
                  type: object
                  properties:
                    time:
                      type: string
                    days:
                      type: array
                      default: []
                      items:
                        type: string
        isOnline:
          type: boolean
          default: false
        lastOnline:
          type: string
          format: date
          example: '2025-3-14'
          default: null
        timeZone:
          type: string
          default: false
        browserTimeZone:
          type: string

        lastTimeInLesson:
          type: string
          description: Date
          format: date
          default: null
        test_user_id:
          type: number
          default: null
          description: TestUser reference
    Comments:
      type: object
      properties:
        msg:
          type: string
        createdAt:
          type: string
          format: date
        group_id:
          type: integer
        studioName:
          type: string
        from:
          type: string
          description: User mongo DB id
        status:
          schema:
          $ref: '#/components/schemas/ComentsStatus'
        type:
          type: string
          enum: [CHAPTER, STUDIO]
        theoryText:
          type: string
        bonusForComment:
          type: number
          default: 0
        timeOfPayed:
          type: string
          format: date
        attachments:
          type: object
          properties:
            url:
              type: string
            name:
              type: string
            type:
              type: string
        reply:
          type: number
          description: Comment schema id
        id:
          type: number
    UserSession:
      type: object
      properties:
        _id:
          type: integer
        name:
          type: string
        sname:
          type: string
        email:
          type: string
      required:
        - _id
        - name
        - email
    ComentsStatus:
      type: string
      enum:
        - ONVERIFICATION
        - APPROVED
        - UNAPPROVED
        - DENIED
        - ACCRUED
        - PAID
    StandartApiError:
      type: object
      properties:
        message:
          type: string
        errors:
          type: array
          example: []

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
